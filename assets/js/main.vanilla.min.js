(function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c="function"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error("Cannot find module '"+i+"'");throw a.code="MODULE_NOT_FOUND",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u="function"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()({1:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var _constants = require("../constants");

var _utils = require("../lib/utils");

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _classPrivateFieldSet(receiver, privateMap, value) { var descriptor = _classExtractFieldDescriptor(receiver, privateMap, "set"); _classApplyDescriptorSet(receiver, descriptor, value); return value; }

function _classApplyDescriptorSet(receiver, descriptor, value) { if (descriptor.set) { descriptor.set.call(receiver, value); } else { if (!descriptor.writable) { throw new TypeError("attempted to set read only private field"); } descriptor.value = value; } }

function _classPrivateFieldGet(receiver, privateMap) { var descriptor = _classExtractFieldDescriptor(receiver, privateMap, "get"); return _classApplyDescriptorGet(receiver, descriptor); }

function _classExtractFieldDescriptor(receiver, privateMap, action) { if (!privateMap.has(receiver)) { throw new TypeError("attempted to " + action + " private field on non-instance"); } return privateMap.get(receiver); }

function _classApplyDescriptorGet(receiver, descriptor) { if (descriptor.get) { return descriptor.get.call(receiver); } return descriptor.value; }

var _isMenuOpen = new WeakMap();

var _menuItemsToggleIcon = new WeakMap();

var _start = new WeakMap();

var _setupEventListeners = new WeakMap();

var _onMenuIconClick = new WeakMap();

var _onMenuClose = new WeakMap();

var _onWindowResize = new WeakMap();

var _onHamburgerClick = new WeakMap();

var _onMenuItemToggleIcon = new WeakMap();

var _onDocumentKeydown = new WeakMap();

var MobileMenu = function MobileMenu() {
  var _this = this;

  _classCallCheck(this, MobileMenu);

  _isMenuOpen.set(this, {
    writable: true,
    value: void 0
  });

  _menuItemsToggleIcon.set(this, {
    writable: true,
    value: void 0
  });

  _start.set(this, {
    writable: true,
    value: function value() {
      _classPrivateFieldSet(_this, _isMenuOpen, false);

      _constants.DOM.mobileMenu.menuItemsHasChildren.forEach(function (item) {
        var span = document.createElement("span");
        span.className = "dropdown-toggle";
        item.getElementsByTagName("a")[0].appendChild(span);
      });

      _classPrivateFieldSet(_this, _menuItemsToggleIcon, _constants.options.sidrDropdownTarget == "link" ? document.querySelectorAll("#mobile-dropdown li.menu-item-has-children > a") : document.querySelectorAll(".dropdown-toggle"));
    }
  });

  _setupEventListeners.set(this, {
    writable: true,
    value: function value() {
      _constants.DOM.mobileMenu.icon.addEventListener("click", _classPrivateFieldGet(_this, _onMenuIconClick));

      document.addEventListener("click", _classPrivateFieldGet(_this, _onMenuClose));

      _constants.DOM.mobileMenu.navWrapper.querySelectorAll('li a[href*="#"]:not([href="#"])').forEach(function (menuItemLink) {
        menuItemLink.addEventListener("click", _classPrivateFieldGet(_this, _onMenuClose));
      });

      _constants.DOM.mobileMenu.navWrapper.addEventListener("click", function (event) {
        event.stopPropagation();
      });

      window.addEventListener("resize", _classPrivateFieldGet(_this, _onWindowResize));

      _constants.DOM.mobileMenu.hamburger.addEventListener("click", _classPrivateFieldGet(_this, _onHamburgerClick));

      _classPrivateFieldGet(_this, _menuItemsToggleIcon).forEach(function (menuItemToggleIcon) {
        menuItemToggleIcon.addEventListener("click", _classPrivateFieldGet(_this, _onMenuItemToggleIcon));
        menuItemToggleIcon.addEventListener("tap", _classPrivateFieldGet(_this, _onMenuItemToggleIcon));
      });

      if (!!_constants.DOM.header && !!_constants.DOM.mobileMenu.nav) {
        document.addEventListener("keydown", _classPrivateFieldGet(_this, _onDocumentKeydown));
      }
    }
  });

  _onMenuIconClick.set(this, {
    writable: true,
    value: function value(event) {
      event.stopPropagation();
      (0, _utils.slideToggle)(_constants.DOM.mobileMenu.navWrapper, 500);

      _constants.DOM.mobileMenu.icon.classList.toggle("opened");

      _constants.DOM.mobileMenu.hamburger.classList.toggle("is-active");
    }
  });

  _onMenuClose.set(this, {
    writable: true,
    value: function value(event) {
      (0, _utils.slideUp)(_constants.DOM.mobileMenu.navWrapper, 200);

      _constants.DOM.mobileMenu.icon.classList.remove("opened");

      _constants.DOM.mobileMenu.hamburger.classList.remove("is-active");
    }
  });

  _onWindowResize.set(this, {
    writable: true,
    value: function value(event) {
      if (window.innerWidth >= 960) {
        _classPrivateFieldGet(_this, _onMenuClose).call(_this);
      }
    }
  });

  _onHamburgerClick.set(this, {
    writable: true,
    value: function value(event) {
      _classPrivateFieldSet(_this, _isMenuOpen, !_classPrivateFieldGet(_this, _isMenuOpen));

      event.currentTarget.setAttribute("aria-expanded", _classPrivateFieldGet(_this, _isMenuOpen));
    }
  });

  _onMenuItemToggleIcon.set(this, {
    writable: true,
    value: function value(event) {
      event.preventDefault();
      event.stopPropagation();
      var menuItemToggleIcon = event.currentTarget;
      var menuItem = _constants.options.sidrDropdownTarget == "link" ? menuItemToggleIcon.parentNode : menuItemToggleIcon.parentNode.parentNode;

      if (!menuItem.classList.contains("active")) {
        _constants.DOM.mobileMenu.menuItemsHasChildren.forEach(function (menuItemHasChildren) {
          if (menuItem != menuItemHasChildren && menuItem.oceanParents(".menu-item-has-children").findIndex(function (parentMenuItem) {
            return parentMenuItem == menuItemHasChildren;
          })) {
            menuItemHasChildren.classList.remove("active");
            (0, _utils.slideUp)(menuItemHasChildren.lastElementChild, 200);
          }
        });

        menuItem.classList.add("active");
        (0, _utils.slideDown)(menuItem.lastElementChild, 200);
      } else {
        menuItem.classList.remove("active");
        (0, _utils.slideUp)(menuItem.lastElementChild, 200);
      }
    }
  });

  _onDocumentKeydown.set(this, {
    writable: true,
    value: function value(event) {
      var tabKey = event.keyCode === 9;
      var shiftKey = event.shiftKey;
      var mobileMenuCloseIcon = document.querySelector(".mobile-menu.opened");

      var mobileMenuElements = _constants.DOM.mobileMenu.nav.querySelectorAll("input, a, button");

      var mobileMenuFirstElement = mobileMenuElements[0];
      var mobileMenuLastElement = mobileMenuElements[mobileMenuElements.length - 1];

      if (!shiftKey && tabKey && mobileMenuLastElement === document.activeElement) {
        event.preventDefault();
        mobileMenuCloseIcon.focus();
      }

      if (shiftKey && tabKey && mobileMenuFirstElement === document.activeElement) {
        event.preventDefault();
        mobileMenuCloseIcon.focus();
      }

      if (shiftKey && tabKey && mobileMenuCloseIcon === document.activeElement) {
        event.preventDefault();
        mobileMenuLastElement.focus();
      }
    }
  });

  if (_constants.DOM.body.classList.contains("dropdown-mobile")) {
    _classPrivateFieldGet(this, _start).call(this);

    _classPrivateFieldGet(this, _setupEventListeners).call(this);
  }
};

exports["default"] = MobileMenu;

},{"../constants":4,"../lib/utils":7}],2:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var _constants = require("../constants");

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _classPrivateFieldGet(receiver, privateMap) { var descriptor = _classExtractFieldDescriptor(receiver, privateMap, "get"); return _classApplyDescriptorGet(receiver, descriptor); }

function _classExtractFieldDescriptor(receiver, privateMap, action) { if (!privateMap.has(receiver)) { throw new TypeError("attempted to " + action + " private field on non-instance"); } return privateMap.get(receiver); }

function _classApplyDescriptorGet(receiver, descriptor) { if (descriptor.get) { return descriptor.get.call(receiver); } return descriptor.value; }

var _setupEventListeners = new WeakMap();

var _onDropdownToggleIcon = new WeakMap();

var _onHeaderReplaceToggleIcon = new WeakMap();

var _onHeaderReplaceCloseIcon = new WeakMap();

var _onWindowClick = new WeakMap();

var _focusForm = new WeakMap();

var _hasTopHeader = new WeakMap();

var Search = function Search() {
  var _this = this;

  _classCallCheck(this, Search);

  _setupEventListeners.set(this, {
    writable: true,
    value: function value() {
      if (_constants.options.menuSearchStyle == "drop_down") {
        _constants.DOM.search.dropdownToggleIcon.addEventListener("click", _classPrivateFieldGet(_this, _onDropdownToggleIcon));
      }

      if (_constants.options.menuSearchStyle == "header_replace") {
        _constants.DOM.search.headerReplaceToggleIcon.addEventListener("click", _classPrivateFieldGet(_this, _onHeaderReplaceToggleIcon));

        _constants.DOM.search.headerReplaceCloseIcon.addEventListener("click", _classPrivateFieldGet(_this, _onHeaderReplaceCloseIcon));
      }

      window.addEventListener("click", _classPrivateFieldGet(_this, _onWindowClick));
    }
  });

  _onDropdownToggleIcon.set(this, {
    writable: true,
    value: function value(event) {
      event.preventDefault();
      event.stopPropagation();
      var _DOM$search = _constants.DOM.search,
          toggleIcon = _DOM$search.dropdownToggleIcon,
          form = _DOM$search.dropdownForm;
      form.classList.toggle("show");
      toggleIcon.parentNode.classList.toggle("active");

      _classPrivateFieldGet(_this, _focusForm).call(_this, form, "input.field");
    }
  });

  _onHeaderReplaceToggleIcon.set(this, {
    writable: true,
    value: function value(event) {
      event.preventDefault();
      event.stopPropagation();
      var form = _constants.DOM.search.headerReplaceForm;
      form.classList.toggle("show");

      if (_classPrivateFieldGet(_this, _hasTopHeader).call(_this)) {
        _constants.DOM.headerTopLeftSide.classList.toggle("hide");

        _constants.DOM.headerTopRighttSide.classList.toggle("hide");
      } else {
        var _document$querySelect;

        _constants.DOM.nav.classList.toggle("hide");

        form.style.maxWidth = ((_document$querySelect = document.querySelector("#site-navigation > ul.dropdown-menu")) === null || _document$querySelect === void 0 ? void 0 : _document$querySelect.offsetWidth) + 60;
      }

      _classPrivateFieldGet(_this, _focusForm).call(_this, form, 'input[type="search"]');
    }
  });

  _onHeaderReplaceCloseIcon.set(this, {
    writable: true,
    value: function value(event) {
      event.preventDefault();
      var form = _constants.DOM.search.headerReplaceForm;
      form.classList.remove("show");

      if (_classPrivateFieldGet(_this, _hasTopHeader).call(_this)) {
        _constants.DOM.headerTopLeftSide.classList.remove("hide");

        _constants.DOM.headerTopRighttSide.classList.remove("hide");
      } else {
        _constants.DOM.nav.classList.remove("hide");
      }
    }
  });

  _onWindowClick.set(this, {
    writable: true,
    value: function value(event) {
      // Dropdonw Search Style Collaps
      if (!event.target.closest("#searchform-dropdown.show")) {
        var _DOM$search$dropdownF, _DOM$search$dropdownT;

        (_DOM$search$dropdownF = _constants.DOM.search.dropdownForm) === null || _DOM$search$dropdownF === void 0 ? void 0 : _DOM$search$dropdownF.classList.remove("show");
        (_DOM$search$dropdownT = _constants.DOM.search.dropdownToggleIcon) === null || _DOM$search$dropdownT === void 0 ? void 0 : _DOM$search$dropdownT.parentNode.classList.remove("active");
      } // Header Replace Search Style Collaps


      if (!event.target.closest("#searchform-header-replace.show")) {
        _constants.DOM.search.headerReplaceForm.classList.remove("show");

        if (_classPrivateFieldGet(_this, _hasTopHeader).call(_this)) {
          _constants.DOM.headerTopLeftSide.classList.remove("hide");

          _constants.DOM.headerTopRighttSide.classList.remove("hide");
        } else {
          _constants.DOM.nav.classList.remove("hide");
        }
      }
    }
  });

  _focusForm.set(this, {
    writable: true,
    value: function value(form, inputClass) {
      var formTransitionDuration = parseFloat(getComputedStyle(form).transitionDuration.replace("s", "")) * 1000;

      if (formTransitionDuration) {
        setTimeout(function () {
          form.querySelector(inputClass).focus();
        }, formTransitionDuration);
      }
    }
  });

  _hasTopHeader.set(this, {
    writable: true,
    value: function value() {
      return _constants.DOM.header.classList.contains("top-header");
    }
  });

  _classPrivateFieldGet(this, _setupEventListeners).call(this);
};

exports["default"] = Search;

},{"../constants":4}],3:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var _constants = require("../constants");

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _classPrivateFieldSet(receiver, privateMap, value) { var descriptor = _classExtractFieldDescriptor(receiver, privateMap, "set"); _classApplyDescriptorSet(receiver, descriptor, value); return value; }

function _classApplyDescriptorSet(receiver, descriptor, value) { if (descriptor.set) { descriptor.set.call(receiver, value); } else { if (!descriptor.writable) { throw new TypeError("attempted to set read only private field"); } descriptor.value = value; } }

function _classPrivateFieldGet(receiver, privateMap) { var descriptor = _classExtractFieldDescriptor(receiver, privateMap, "get"); return _classApplyDescriptorGet(receiver, descriptor); }

function _classExtractFieldDescriptor(receiver, privateMap, action) { if (!privateMap.has(receiver)) { throw new TypeError("attempted to " + action + " private field on non-instance"); } return privateMap.get(receiver); }

function _classApplyDescriptorGet(receiver, descriptor) { if (descriptor.get) { return descriptor.get.call(receiver); } return descriptor.value; }

var _select = new WeakMap();

var _render = new WeakMap();

var _style = new WeakMap();

var _setupEventListeners = new WeakMap();

var _onMouseenter = new WeakMap();

var _onMouseleave = new WeakMap();

var Select = function Select() {
  var _this = this;

  _classCallCheck(this, Select);

  _select.set(this, {
    writable: true,
    value: void 0
  });

  _render.set(this, {
    writable: true,
    value: function value() {
      _constants.DOM.selects.forEach(function (select) {
        _classPrivateFieldSet(_this, _select, select);

        _classPrivateFieldGet(_this, _select).insertAdjacentHTML("afterend", "<span class=\"theme-select ".concat(_classPrivateFieldGet(_this, _select).classList, "\">\n                    <span class=\"theme-selectInner\">\n                        ").concat(_classPrivateFieldGet(_this, _select).options[_classPrivateFieldGet(_this, _select).selectedIndex].text, "\n                    </span>\n                </span>"));

        _classPrivateFieldGet(_this, _select).classList.add("hasCustomSelect");

        _classPrivateFieldGet(_this, _style).call(_this);

        _classPrivateFieldGet(_this, _setupEventListeners).call(_this);
      });
    }
  });

  _style.set(this, {
    writable: true,
    value: function value() {
      _classPrivateFieldGet(_this, _select).style.opacity = 0;
      _classPrivateFieldGet(_this, _select).style.position = "absolute";
      _classPrivateFieldGet(_this, _select).style.width = "228px";
      _classPrivateFieldGet(_this, _select).style.height = "34px";
      _classPrivateFieldGet(_this, _select).style.fontSize = "13px";
      _classPrivateFieldGet(_this, _select).style.appearance = "menulist-button";
      _classPrivateFieldGet(_this, _select).nextSibling.style.display = "inline-block";
      _classPrivateFieldGet(_this, _select).nextSibling.firstElementChild.style.display = "inline-block";
    }
  });

  _setupEventListeners.set(this, {
    writable: true,
    value: function value() {
      _classPrivateFieldGet(_this, _select).addEventListener("mouseenter", _classPrivateFieldGet(_this, _onMouseenter));

      _classPrivateFieldGet(_this, _select).addEventListener("mouseleave", _classPrivateFieldGet(_this, _onMouseleave));
    }
  });

  _onMouseenter.set(this, {
    writable: true,
    value: function value() {
      _classPrivateFieldGet(_this, _select).classList.add("theme-selectHover");
    }
  });

  _onMouseleave.set(this, {
    writable: true,
    value: function value() {
      _classPrivateFieldGet(_this, _select).classList.remove("theme-selectHover");
    }
  });

  _classPrivateFieldGet(this, _render).call(this);
};

exports["default"] = Select;

},{"../constants":4}],4:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.DOMString = exports.DOM = exports.options = void 0;
var options = oceanwpLocalize;
exports.options = options;
var DOM = {
  body: document.body,
  header: document.querySelector("#site-header"),
  headerTopLeftSide: document.querySelector("#site-header.top-header .header-top .left"),
  headerTopRightSide: document.querySelector("#site-header.top-header .header-top .right"),
  nav: document.querySelector("#site-header.header-replace #site-navigation"),
  selects: document.querySelectorAll(options.customSelects),
  mobileMenu: {
    nav: document.querySelector("#mobile-dropdown > nav"),
    navWrapper: document.querySelector("#mobile-dropdown"),
    icon: document.querySelector(".mobile-menu"),
    hamburger: document.querySelector(".mobile-menu > .hamburger"),
    menuItemsHasChildren: document.querySelectorAll("#mobile-dropdown .menu-item-has-children")
  },
  search: {
    forms: document.querySelectorAll("form.header-searchform"),
    dropdownToggleIcon: document.querySelector("a.search-dropdown-toggle"),
    dropdownForm: document.querySelector("#searchform-dropdown"),
    headerReplaceToggleIcon: document.querySelector("a.search-header-replace-toggle"),
    headerReplaceCloseIcon: document.querySelector("#searchform-header-replace-close"),
    headerReplaceForm: document.querySelector("#searchform-header-replace")
  }
};
exports.DOM = DOM;
var DOMString = {};
exports.DOMString = DOMString;

},{}],5:[function(require,module,exports){
"use strict";

require("./lib/element");

var _select = _interopRequireDefault(require("./components/select"));

var _mobileMenu = _interopRequireDefault(require("./components/mobile-menu"));

var _search = _interopRequireDefault(require("./components/search"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

var OceanWP = function OceanWP() {
  _classCallCheck(this, OceanWP);

  _defineProperty(this, "start", function () {});

  this.select = new _select["default"]();
  this.mobileMenu = new _mobileMenu["default"]();
  this.search = new _search["default"]();
};

"use script";
window.oceanwp = new OceanWP();
oceanwp.start();

},{"./components/mobile-menu":1,"./components/search":2,"./components/select":3,"./lib/element":6}],6:[function(require,module,exports){
"use strict";

Element.prototype.oceanParents = function (selector) {
  var elements = [];
  var elem = this;
  var ishaveselector = selector !== undefined;

  while ((elem = elem.parentElement) !== null) {
    if (elem.nodeType !== Node.ELEMENT_NODE) {
      continue;
    }

    if (!ishaveselector || elem.matches(selector)) {
      elements.push(elem);
    }
  }

  return elements;
};

},{}],7:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.slideToggle = exports.slideDown = exports.slideUp = exports.wrap = void 0;

var wrap = function wrap(element) {
  var wrapper = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : document.createElement("div");

  if (element.nextSibling) {
    element.parentNode.insertBefore(wrapper, element.nextSibling);
  } else {
    element.parentNode.appendChild(wrapper);
  }

  return wrapper.appendChild(element);
};

exports.wrap = wrap;

var slideUp = function slideUp(element, duration) {
  element.style.transitionProperty = "height, margin, padding";
  element.style.transitionDuration = duration + "ms";
  element.style.boxSizing = "border-box";
  element.style.height = element.offsetHeight + "px";
  setTimeout(function () {
    element.style.height = 0;
  }, 10);
  element.style.paddingTop = 0;
  element.style.paddingBottom = 0;
  element.style.marginTop = 0;
  element.style.marginBottom = 0;
  element.style.overflow = "hidden";
  window.setTimeout(function () {
    element.style.display = "none";
    element.style.removeProperty("height");
    element.style.removeProperty("padding-top");
    element.style.removeProperty("padding-bottom");
    element.style.removeProperty("margin-top");
    element.style.removeProperty("margin-bottom");
    element.style.removeProperty("overflow");
    element.style.removeProperty("transition-duration");
    element.style.removeProperty("transition-property");
  }, duration);
};

exports.slideUp = slideUp;

var slideDown = function slideDown(element, duration) {
  element.style.removeProperty("display");
  var display = window.getComputedStyle(element).display;

  if (display === "none") {
    display = "block";
  }

  element.style.display = display;
  var height = element.offsetHeight;
  element.style.height = 0;
  element.style.paddingTop = 0;
  element.style.paddingBottom = 0;
  element.style.marginTop = 0;
  element.style.marginBottom = 0;
  element.style.overflow = "hidden";
  element.style.boxSizing = "border-box";
  element.style.transitionProperty = "height, margin, padding";
  element.style.transitionDuration = duration + "ms";
  setTimeout(function () {
    element.style.height = height + "px";
  }, 10);
  element.style.removeProperty("padding-top");
  element.style.removeProperty("padding-bottom");
  element.style.removeProperty("margin-top");
  element.style.removeProperty("margin-bottom");
  window.setTimeout(function () {
    element.style.removeProperty("height");
    element.style.removeProperty("overflow");
    element.style.removeProperty("transition-duration");
    element.style.removeProperty("transition-property");
  }, duration);
};

exports.slideDown = slideDown;

var slideToggle = function slideToggle(element, duration) {
  return window.getComputedStyle(element).display === "none" ? slideDown(element, duration) : slideUp(element, duration);
};

exports.slideToggle = slideToggle;

},{}]},{},[5])
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
