(function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c="function"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error("Cannot find module '"+i+"'");throw a.code="MODULE_NOT_FOUND",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u="function"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()({1:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var _constants = require("../constants");

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _classPrivateFieldGet(receiver, privateMap) { var descriptor = _classExtractFieldDescriptor(receiver, privateMap, "get"); return _classApplyDescriptorGet(receiver, descriptor); }

function _classExtractFieldDescriptor(receiver, privateMap, action) { if (!privateMap.has(receiver)) { throw new TypeError("attempted to " + action + " private field on non-instance"); } return privateMap.get(receiver); }

function _classApplyDescriptorGet(receiver, descriptor) { if (descriptor.get) { return descriptor.get.call(receiver); } return descriptor.value; }

var _start = new WeakMap();

var _setupEventListeners = new WeakMap();

var BlogMasonry = function BlogMasonry() {
  var _this = this;

  _classCallCheck(this, BlogMasonry);

  _start.set(this, {
    writable: true,
    value: function value() {
      _constants.DOM.blogMasonryGrids.forEach(function (blogMasonryGrid) {
        imagesLoaded(blogMasonryGrid, function (instance) {
          new Isotope(blogMasonryGrid, {
            itemSelector: ".isotope-entry",
            transformsEnabled: true,
            isOriginLeft: _constants.options.isRTL ? false : true,
            transitionDuration: "0.0s"
          });
        });
      });
    }
  });

  _setupEventListeners.set(this, {
    writable: true,
    value: function value() {
      window.addEventListener("orientationchange", _classPrivateFieldGet(_this, _start).call(_this));
    }
  });

  _classPrivateFieldGet(this, _start).call(this);

  _classPrivateFieldGet(this, _setupEventListeners).call(this);
};

exports["default"] = BlogMasonry;

},{"../constants":8}],2:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var _constants = require("../constants");

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _classPrivateFieldSet(receiver, privateMap, value) { var descriptor = _classExtractFieldDescriptor(receiver, privateMap, "set"); _classApplyDescriptorSet(receiver, descriptor, value); return value; }

function _classApplyDescriptorSet(receiver, descriptor, value) { if (descriptor.set) { descriptor.set.call(receiver, value); } else { if (!descriptor.writable) { throw new TypeError("attempted to set read only private field"); } descriptor.value = value; } }

function _classPrivateFieldGet(receiver, privateMap) { var descriptor = _classExtractFieldDescriptor(receiver, privateMap, "get"); return _classApplyDescriptorGet(receiver, descriptor); }

function _classExtractFieldDescriptor(receiver, privateMap, action) { if (!privateMap.has(receiver)) { throw new TypeError("attempted to " + action + " private field on non-instance"); } return privateMap.get(receiver); }

function _classApplyDescriptorGet(receiver, descriptor) { if (descriptor.get) { return descriptor.get.call(receiver); } return descriptor.value; }

var _lastWindowWidth = new WeakMap();

var _lastWindowHeight = new WeakMap();

var _start = new WeakMap();

var _setupEventListeners = new WeakMap();

var _onWindowLoad = new WeakMap();

var _onWindowResize = new WeakMap();

var _fixedFooter = new WeakMap();

var _parallaxFooter = new WeakMap();

var Footer = function Footer() {
  var _this = this;

  _classCallCheck(this, Footer);

  _lastWindowWidth.set(this, {
    writable: true,
    value: void 0
  });

  _lastWindowHeight.set(this, {
    writable: true,
    value: void 0
  });

  _start.set(this, {
    writable: true,
    value: function value() {
      _classPrivateFieldSet(_this, _lastWindowWidth, window.innerWidth);

      _classPrivateFieldSet(_this, _lastWindowHeight, window.innerHeight);
    }
  });

  _setupEventListeners.set(this, {
    writable: true,
    value: function value() {
      window.addEventListener("load", _classPrivateFieldGet(_this, _onWindowLoad));
      window.addEventListener("resize", _classPrivateFieldGet(_this, _onWindowResize));
    }
  });

  _onWindowLoad.set(this, {
    writable: true,
    value: function value(event) {
      _classPrivateFieldGet(_this, _fixedFooter).call(_this);

      _classPrivateFieldGet(_this, _parallaxFooter).call(_this);
    }
  });

  _onWindowResize.set(this, {
    writable: true,
    value: function value(event) {
      if (_classPrivateFieldGet(_this, _lastWindowWidth) !== window.innerWidth || _classPrivateFieldGet(_this, _lastWindowHeight) !== window.innerHeight) {
        _classPrivateFieldGet(_this, _fixedFooter).call(_this);
      }

      _classPrivateFieldGet(_this, _parallaxFooter).call(_this);
    }
  });

  _fixedFooter.set(this, {
    writable: true,
    value: function value() {
      if (!document.body.classList.contains("has-fixed-footer")) {
        return;
      }

      var offset = 0;

      if (!!_constants.DOM.WPAdminbar) {
        offset = _constants.DOM.WPAdminbar.offsetHeight;
      }

      _constants.DOM.main.style.minHeight = _constants.DOM.main.offsetHeight + (window.innerHeight - _constants.DOM.html.offsetHeight - offset) + "px";
    }
  });

  _parallaxFooter.set(this, {
    writable: true,
    value: function value() {
      if (_constants.DOM.body.classList.contains("has-parallax-footer")) {
        setTimeout(function () {
          _constants.DOM.main.style.marginBottom = _constants.DOM.parallaxFooter.offsetHeight + "px";
        }, 1);
      }
    }
  });

  _classPrivateFieldGet(this, _start).call(this);

  _classPrivateFieldGet(this, _setupEventListeners).call(this);
};

exports["default"] = Footer;

},{"../constants":8}],3:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var _constants = require("../constants");

var _utils = require("../lib/utils");

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _classPrivateFieldGet(receiver, privateMap) { var descriptor = _classExtractFieldDescriptor(receiver, privateMap, "get"); return _classApplyDescriptorGet(receiver, descriptor); }

function _classExtractFieldDescriptor(receiver, privateMap, action) { if (!privateMap.has(receiver)) { throw new TypeError("attempted to " + action + " private field on non-instance"); } return privateMap.get(receiver); }

function _classApplyDescriptorGet(receiver, descriptor) { if (descriptor.get) { return descriptor.get.call(receiver); } return descriptor.value; }

var _start = new WeakMap();

var _setupEventListeners = new WeakMap();

var _onNoClickMenuItemClick = new WeakMap();

var _onFullScreenMenuBarClick = new WeakMap();

var _onFullScreenMenuItemLinkClick = new WeakMap();

var _onFullScreenMenuItemHashtagLinkClick = new WeakMap();

var _openFullScreenMenu = new WeakMap();

var _closeFullScreenMenu = new WeakMap();

var Menu = function Menu() {
  var _this = this;

  _classCallCheck(this, Menu);

  _start.set(this, {
    writable: true,
    value: function value() {}
  });

  _setupEventListeners.set(this, {
    writable: true,
    value: function value() {
      document.querySelectorAll("li.nav-no-click > a").forEach(function (noClickMenuItem) {
        noClickMenuItem.addEventListener("click", _classPrivateFieldGet(_this, _onNoClickMenuItemClick));
      });

      if (!!_constants.DOM.fullScreenMenuBar) {
        _constants.DOM.fullScreenMenuBar.addEventListener("click", _classPrivateFieldGet(_this, _onFullScreenMenuBarClick));

        document.querySelectorAll('#full-screen-menu #site-navigation ul > li.dropdown > a > .text-wrap > span.nav-arrow, #full-screen-menu #site-navigation ul > li.dropdown > a[href="#"]').forEach(function (menuItemLink) {
          menuItemLink.addEventListener("click", _classPrivateFieldGet(_this, _onFullScreenMenuItemLinkClick));
          menuItemLink.addEventListener("tap", _classPrivateFieldGet(_this, _onFullScreenMenuItemLinkClick));
        });
        document.querySelectorAll('#full-screen-menu #site-navigation a.menu-link[href*="#"]:not([href="#"])').forEach(function (menuItemLink) {
          menuItemLink.addEventListener("click", _classPrivateFieldGet(_this, _onFullScreenMenuItemHashtagLinkClick));
        });
      }
    }
  });

  _onNoClickMenuItemClick.set(this, {
    writable: true,
    value: function value(event) {
      event.preventDefault();
      event.stopPropagation();
    }
  });

  _onFullScreenMenuBarClick.set(this, {
    writable: true,
    value: function value(event) {
      event.preventDefault();
      var menuBar = event.currentTarget;

      if (!menuBar.classList.contains("exit")) {
        _classPrivateFieldGet(_this, _openFullScreenMenu).call(_this);
      } else {
        _classPrivateFieldGet(_this, _closeFullScreenMenu).call(_this);
      }
    }
  });

  _onFullScreenMenuItemLinkClick.set(this, {
    writable: true,
    value: function value(event) {
      event.preventDefault();
      event.stopPropagation();
      var menuItemLink = event.currentTarget;
      var menuItem = menuItemLink.closest("li.dropdown");
      var subMenu = menuItem.querySelector("ul.sub-menu");

      if (!(window.getComputedStyle(subMenu).display === "none")) {
        menuItem.classList.remove("open-sub");
        (0, _utils.slideUp)(subMenu, 200);
      } else {
        menuItem.classList.add("open-sub");
        (0, _utils.slideDown)(subMenu, 200);
      }
    }
  });

  _onFullScreenMenuItemHashtagLinkClick.set(this, {
    writable: true,
    value: function value(event) {
      _classPrivateFieldGet(_this, _closeFullScreenMenu).call(_this);
    }
  });

  _openFullScreenMenu.set(this, {
    writable: true,
    value: function value() {
      var _DOM$fullScreenLogo;

      _constants.DOM.fullScreenHeader.classList.add("nav-open");

      _constants.DOM.fullScreenMenuBar.classList.add("exit");

      (_DOM$fullScreenLogo = _constants.DOM.fullScreenLogo) === null || _DOM$fullScreenLogo === void 0 ? void 0 : _DOM$fullScreenLogo.classList.add("opened");

      _constants.DOM.fullScreenMenu.classList.add("active");

      (0, _utils.fadeIn)(_constants.DOM.fullScreenMenu);
      var htmlWidthBeforeOverflowHidden = _constants.DOM.html.innerWidth;
      _constants.DOM.html.style.overflow = "hidden";
      var htmlWidthAfterOverflowHidden = _constants.DOM.html.innerWidth;
      _constants.DOM.html.style.marginRight = htmlWidthAfterOverflowHidden - htmlWidthAfterOverflowHidden + "px";
    }
  });

  _closeFullScreenMenu.set(this, {
    writable: true,
    value: function value() {
      var _DOM$fullScreenLogo2;

      _constants.DOM.fullScreenHeader.classList.remove("nav-open");

      _constants.DOM.fullScreenMenuBar.classList.remove("exit");

      (_DOM$fullScreenLogo2 = _constants.DOM.fullScreenLogo) === null || _DOM$fullScreenLogo2 === void 0 ? void 0 : _DOM$fullScreenLogo2.classList.remove("opened");

      _constants.DOM.fullScreenMenu.classList.remove("active");

      (0, _utils.fadeOut)(_constants.DOM.fullScreenMenu);
      _constants.DOM.html.style.overflow = "";
      _constants.DOM.html.style.marginRight = "";
      document.querySelectorAll("#full-screen-menu #site-navigation ul > li.dropdown").forEach(function (menuItem) {
        menuItem.classList.remove("open-sub");
      });
      document.querySelectorAll("#full-screen-menu #site-navigation ul.sub-menu").forEach(function (subMenu) {
        (0, _utils.slideUp)(subMenu, 200);
      });
    }
  });

  _classPrivateFieldGet(this, _start).call(this);

  _classPrivateFieldGet(this, _setupEventListeners).call(this);
};

exports["default"] = Menu;

},{"../constants":8,"../lib/utils":11}],4:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var _constants = require("../constants");

var _utils = require("../lib/utils");

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _classPrivateFieldSet(receiver, privateMap, value) { var descriptor = _classExtractFieldDescriptor(receiver, privateMap, "set"); _classApplyDescriptorSet(receiver, descriptor, value); return value; }

function _classApplyDescriptorSet(receiver, descriptor, value) { if (descriptor.set) { descriptor.set.call(receiver, value); } else { if (!descriptor.writable) { throw new TypeError("attempted to set read only private field"); } descriptor.value = value; } }

function _classPrivateFieldGet(receiver, privateMap) { var descriptor = _classExtractFieldDescriptor(receiver, privateMap, "get"); return _classApplyDescriptorGet(receiver, descriptor); }

function _classExtractFieldDescriptor(receiver, privateMap, action) { if (!privateMap.has(receiver)) { throw new TypeError("attempted to " + action + " private field on non-instance"); } return privateMap.get(receiver); }

function _classApplyDescriptorGet(receiver, descriptor) { if (descriptor.get) { return descriptor.get.call(receiver); } return descriptor.value; }

var _isMenuOpen = new WeakMap();

var _menuItemsToggleIcon = new WeakMap();

var _dropdownMenuStart = new WeakMap();

var _dropdownMenuSetupEventListeners = new WeakMap();

var _fullScreenMenuStart = new WeakMap();

var _fullScreenMenuSetupEventListeners = new WeakMap();

var _onMenuIconClick = new WeakMap();

var _onMenuClose = new WeakMap();

var _onWindowResize = new WeakMap();

var _onHamburgerClick = new WeakMap();

var _onMenuItemToggleIcon = new WeakMap();

var _onDocumentKeydown = new WeakMap();

var _onFullScreenMenuItemClick = new WeakMap();

var _onFullScreenCloseIconClick = new WeakMap();

var _closeFullScreenMenu = new WeakMap();

var _onFullScreenDropownToggleIcon = new WeakMap();

var _onFullScreenWindowResize = new WeakMap();

var MobileMenu = function MobileMenu() {
  var _this = this;

  _classCallCheck(this, MobileMenu);

  _isMenuOpen.set(this, {
    writable: true,
    value: void 0
  });

  _menuItemsToggleIcon.set(this, {
    writable: true,
    value: void 0
  });

  _dropdownMenuStart.set(this, {
    writable: true,
    value: function value() {
      _classPrivateFieldSet(_this, _isMenuOpen, false);

      _constants.DOM.mobileMenu.menuItemsHasChildren.forEach(function (menuItem) {
        var span = document.createElement("span");
        span.className = "dropdown-toggle";
        menuItem.getElementsByTagName("a")[0].appendChild(span);
      });

      _classPrivateFieldSet(_this, _menuItemsToggleIcon, _constants.options.sidrDropdownTarget == "link" ? document.querySelectorAll("#mobile-dropdown li.menu-item-has-children > a") : document.querySelectorAll(".dropdown-toggle"));
    }
  });

  _dropdownMenuSetupEventListeners.set(this, {
    writable: true,
    value: function value() {
      var _DOM$mobileMenu$hambu;

      _constants.DOM.mobileMenu.icon.addEventListener("click", _classPrivateFieldGet(_this, _onMenuIconClick));

      document.addEventListener("click", _classPrivateFieldGet(_this, _onMenuClose));

      _constants.DOM.mobileMenu.navWrapper.querySelectorAll('li a[href*="#"]:not([href="#"])').forEach(function (menuItemLink) {
        menuItemLink.addEventListener("click", _classPrivateFieldGet(_this, _onMenuClose));
      });

      _constants.DOM.mobileMenu.navWrapper.addEventListener("click", function (event) {
        event.stopPropagation();
      });

      window.addEventListener("resize", _classPrivateFieldGet(_this, _onWindowResize));
      (_DOM$mobileMenu$hambu = _constants.DOM.mobileMenu.hamburger) === null || _DOM$mobileMenu$hambu === void 0 ? void 0 : _DOM$mobileMenu$hambu.addEventListener("click", _classPrivateFieldGet(_this, _onHamburgerClick));

      _classPrivateFieldGet(_this, _menuItemsToggleIcon).forEach(function (menuItemToggleIcon) {
        menuItemToggleIcon.addEventListener("click", _classPrivateFieldGet(_this, _onMenuItemToggleIcon));
        menuItemToggleIcon.addEventListener("tap", _classPrivateFieldGet(_this, _onMenuItemToggleIcon));
      });

      if (!!_constants.DOM.header && !!_constants.DOM.mobileMenu.nav) {
        document.addEventListener("keydown", _classPrivateFieldGet(_this, _onDocumentKeydown));
      }
    }
  });

  _fullScreenMenuStart.set(this, {
    writable: true,
    value: function value() {
      _constants.DOM.mobileMenu.fullScreen.querySelectorAll(".menu-item-has-children > a").forEach(function (menuItemLink) {
        menuItemLink.insertAdjacentHTML("beforeend", '<span class="dropdown-toggle"></span>');
      });
    }
  });

  _fullScreenMenuSetupEventListeners.set(this, {
    writable: true,
    value: function value() {
      window.addEventListener("resize", _classPrivateFieldGet(_this, _onFullScreenWindowResize));

      _constants.DOM.mobileMenu.icon.addEventListener("click", _classPrivateFieldGet(_this, _onFullScreenMenuItemClick));

      document.querySelectorAll('#mobile-fullscreen nav ul > li.menu-item-has-children > a > span.dropdown-toggle, #mobile-fullscreen nav ul > li.menu-item-has-children > a[href="#"]').forEach(function (menuItemLink) {
        menuItemLink.addEventListener("click", _classPrivateFieldGet(_this, _onFullScreenDropownToggleIcon));
        menuItemLink.addEventListener("tap", _classPrivateFieldGet(_this, _onFullScreenDropownToggleIcon));
      });
      document.querySelectorAll('#mobile-fullscreen .fs-dropdown-menu li a[href*="#"]:not([href="#"]), #mobile-fullscreen #mobile-nav li a[href*="#"]:not([href="#"]), #mobile-fullscreen a.close').forEach(function (menuItemLink) {
        menuItemLink.addEventListener("click", _classPrivateFieldGet(_this, _onFullScreenCloseIconClick));
      });
    }
  });

  _onMenuIconClick.set(this, {
    writable: true,
    value: function value(event) {
      var _DOM$mobileMenu$hambu2;

      event.stopPropagation();
      (0, _utils.slideToggle)(_constants.DOM.mobileMenu.navWrapper, 500);

      _constants.DOM.mobileMenu.icon.classList.toggle("opened");

      (_DOM$mobileMenu$hambu2 = _constants.DOM.mobileMenu.hamburger) === null || _DOM$mobileMenu$hambu2 === void 0 ? void 0 : _DOM$mobileMenu$hambu2.classList.toggle("is-active");
    }
  });

  _onMenuClose.set(this, {
    writable: true,
    value: function value(event) {
      var _DOM$mobileMenu$hambu3;

      (0, _utils.slideUp)(_constants.DOM.mobileMenu.navWrapper, 200);

      _constants.DOM.mobileMenu.icon.classList.remove("opened");

      (_DOM$mobileMenu$hambu3 = _constants.DOM.mobileMenu.hamburger) === null || _DOM$mobileMenu$hambu3 === void 0 ? void 0 : _DOM$mobileMenu$hambu3.classList.remove("is-active");
    }
  });

  _onWindowResize.set(this, {
    writable: true,
    value: function value(event) {
      if (window.innerWidth >= 960) {
        _classPrivateFieldGet(_this, _onMenuClose).call(_this);
      }
    }
  });

  _onHamburgerClick.set(this, {
    writable: true,
    value: function value(event) {
      _classPrivateFieldSet(_this, _isMenuOpen, !_classPrivateFieldGet(_this, _isMenuOpen));

      event.currentTarget.setAttribute("aria-expanded", _classPrivateFieldGet(_this, _isMenuOpen));
    }
  });

  _onMenuItemToggleIcon.set(this, {
    writable: true,
    value: function value(event) {
      event.preventDefault();
      event.stopPropagation();
      var menuItemToggleIcon = event.currentTarget;
      var menuItem = _constants.options.sidrDropdownTarget == "link" ? menuItemToggleIcon.parentNode : menuItemToggleIcon.parentNode.parentNode;

      if (!menuItem.classList.contains("active")) {
        _constants.DOM.mobileMenu.menuItemsHasChildren.forEach(function (menuItemHasChildren) {
          if (menuItem != menuItemHasChildren && menuItem.oceanParents(".menu-item-has-children").findIndex(function (parentMenuItem) {
            return parentMenuItem == menuItemHasChildren;
          })) {
            menuItemHasChildren.classList.remove("active");
            (0, _utils.slideUp)(menuItemHasChildren.lastElementChild, 200);
          }
        });

        menuItem.classList.add("active");
        (0, _utils.slideDown)(menuItem.lastElementChild, 200);
      } else {
        menuItem.classList.remove("active");
        (0, _utils.slideUp)(menuItem.lastElementChild, 200);
      }
    }
  });

  _onDocumentKeydown.set(this, {
    writable: true,
    value: function value(event) {
      var tabKey = event.keyCode === 9;
      var shiftKey = event.shiftKey;
      var mobileMenuCloseIcon = document.querySelector(".mobile-menu.opened");

      var mobileMenuElements = _constants.DOM.mobileMenu.nav.querySelectorAll("input, a, button");

      var mobileMenuFirstElement = mobileMenuElements[0];
      var mobileMenuLastElement = mobileMenuElements[mobileMenuElements.length - 1];

      if (!shiftKey && tabKey && mobileMenuLastElement === document.activeElement) {
        event.preventDefault();
        mobileMenuCloseIcon.focus();
      }

      if (shiftKey && tabKey && mobileMenuFirstElement === document.activeElement) {
        event.preventDefault();
        mobileMenuCloseIcon.focus();
      }

      if (shiftKey && tabKey && mobileMenuCloseIcon === document.activeElement) {
        event.preventDefault();
        mobileMenuLastElement.focus();
      }
    }
  });

  _onFullScreenMenuItemClick.set(this, {
    writable: true,
    value: function value(event) {
      event.preventDefault();
      event.stopPropagation();

      _constants.DOM.mobileMenu.icon.classList.add("exit");

      _constants.DOM.mobileMenu.fullScreen.classList.add("active");

      _constants.DOM.mobileMenu.hamburger.classList.add("is-active");

      (0, _utils.fadeIn)(_constants.DOM.mobileMenu.fullScreen);
      var htmlWidthBeforeOverflowHidden = _constants.DOM.html.innerWidth;
      _constants.DOM.html.style.overflow = "hidden";
      var htmlWidthAfterOverflowHidden = _constants.DOM.html.innerWidth;
      _constants.DOM.html.style.marginRight = htmlWidthAfterOverflowHidden - htmlWidthBeforeOverflowHidden + "px";
    }
  });

  _onFullScreenCloseIconClick.set(this, {
    writable: true,
    value: function value(event) {
      event.preventDefault();

      _classPrivateFieldGet(_this, _closeFullScreenMenu).call(_this);
    }
  });

  _closeFullScreenMenu.set(this, {
    writable: true,
    value: function value() {
      _constants.DOM.mobileMenu.icon.classList.remove("exit");

      _constants.DOM.mobileMenu.fullScreen.classList.remove("active");

      (0, _utils.fadeOut)(_constants.DOM.mobileMenu.fullScreen);
      _constants.DOM.html.style.overflow = "";
      _constants.DOM.html.style.marginRight = "";
      document.querySelectorAll("#mobile-fullscreen nav ul > li.dropdown").forEach(function (menuItem) {
        menuItem.classList.remove("open-sub");
      });
      document.querySelectorAll("#mobile-fullscreen nav ul.sub-menu").forEach(function (subMenu) {
        (0, _utils.slideUp)(subMenu, 200);
      });

      _constants.DOM.mobileMenu.hamburger.classList.remove("is-active");
    }
  });

  _onFullScreenDropownToggleIcon.set(this, {
    writable: true,
    value: function value(event) {
      event.preventDefault();
      event.stopPropagation();
      var menuItemLink = event.currentTarget;
      var menuItem = menuItemLink.closest("li.menu-item-has-children");
      var subMenu = menuItem.querySelector("ul.sub-menu");

      if (!(window.getComputedStyle(subMenu).display === "none")) {
        menuItem.classList.remove("open-sub");
        (0, _utils.slideUp)(subMenu, 200);
      } else {
        menuItem.classList.add("open-sub");
        (0, _utils.slideDown)(subMenu, 200);
      }
    }
  });

  _onFullScreenWindowResize.set(this, {
    writable: true,
    value: function value(event) {
      if (window.innerWidth >= 960) {
        _classPrivateFieldGet(_this, _closeFullScreenMenu).call(_this);
      }
    }
  });

  if (_constants.DOM.body.classList.contains("dropdown-mobile")) {
    _classPrivateFieldGet(this, _dropdownMenuStart).call(this);

    _classPrivateFieldGet(this, _dropdownMenuSetupEventListeners).call(this);
  }

  if (_constants.DOM.body.classList.contains("fullscreen-mobile")) {
    _classPrivateFieldGet(this, _fullScreenMenuStart).call(this);

    _classPrivateFieldGet(this, _fullScreenMenuSetupEventListeners).call(this);
  }
};

exports["default"] = MobileMenu;

},{"../constants":8,"../lib/utils":11}],5:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var _constants = require("../constants");

var _utils = require("../lib/utils");

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _classPrivateFieldGet(receiver, privateMap) { var descriptor = _classExtractFieldDescriptor(receiver, privateMap, "get"); return _classApplyDescriptorGet(receiver, descriptor); }

function _classExtractFieldDescriptor(receiver, privateMap, action) { if (!privateMap.has(receiver)) { throw new TypeError("attempted to " + action + " private field on non-instance"); } return privateMap.get(receiver); }

function _classApplyDescriptorGet(receiver, descriptor) { if (descriptor.get) { return descriptor.get.call(receiver); } return descriptor.value; }

var _start = new WeakMap();

var _setupEventListeners = new WeakMap();

var _onWindowScroll = new WeakMap();

var _onScrollTopClick = new WeakMap();

var ScrollTop = function ScrollTop() {
  var _this = this;

  _classCallCheck(this, ScrollTop);

  _start.set(this, {
    writable: true,
    value: function value() {}
  });

  _setupEventListeners.set(this, {
    writable: true,
    value: function value() {
      var _DOM$scrollTop, _DOM$goTop, _DOM$goTopSlash;

      window.addEventListener("scroll", _classPrivateFieldGet(_this, _onWindowScroll));
      (_DOM$scrollTop = _constants.DOM.scrollTop) === null || _DOM$scrollTop === void 0 ? void 0 : _DOM$scrollTop.addEventListener("click", _classPrivateFieldGet(_this, _onScrollTopClick));
      (_DOM$goTop = _constants.DOM.goTop) === null || _DOM$goTop === void 0 ? void 0 : _DOM$goTop.addEventListener("click", _classPrivateFieldGet(_this, _onScrollTopClick));
      (_DOM$goTopSlash = _constants.DOM.goTopSlash) === null || _DOM$goTopSlash === void 0 ? void 0 : _DOM$goTopSlash.addEventListener("click", _classPrivateFieldGet(_this, _onScrollTopClick));
    }
  });

  _onWindowScroll.set(this, {
    writable: true,
    value: function value(event) {
      if (!_constants.DOM.scrollTop) {
        return;
      }

      if (window.pageYOffset > 100) {
        if (window.getComputedStyle(_constants.DOM.scrollTop).display === "none") {
          (0, _utils.fadeIn)(_constants.DOM.scrollTop);
        }
      } else {
        if (window.getComputedStyle(_constants.DOM.scrollTop).display !== "none") {
          (0, _utils.fadeOut)(_constants.DOM.scrollTop);
        }
      }
    }
  });

  _onScrollTopClick.set(this, {
    writable: true,
    value: function value(event) {
      var _scrollTop$parentNode;

      event.preventDefault();
      var scrollTop = event.currentTarget;

      _constants.DOM.html.scrollTo({
        top: 0,
        behavior: "smooth"
      });

      _constants.DOM.body.scrollTo({
        top: 0,
        behavior: "smooth"
      });

      (_scrollTop$parentNode = scrollTop.parentNode) === null || _scrollTop$parentNode === void 0 ? void 0 : _scrollTop$parentNode.classList.remove("sfHover");
    }
  });

  _classPrivateFieldGet(this, _start).call(this);

  _classPrivateFieldGet(this, _setupEventListeners).call(this);
};

exports["default"] = ScrollTop;

},{"../constants":8,"../lib/utils":11}],6:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var _constants = require("../constants");

var _utils = require("../lib/utils");

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _classPrivateFieldGet(receiver, privateMap) { var descriptor = _classExtractFieldDescriptor(receiver, privateMap, "get"); return _classApplyDescriptorGet(receiver, descriptor); }

function _classExtractFieldDescriptor(receiver, privateMap, action) { if (!privateMap.has(receiver)) { throw new TypeError("attempted to " + action + " private field on non-instance"); } return privateMap.get(receiver); }

function _classApplyDescriptorGet(receiver, descriptor) { if (descriptor.get) { return descriptor.get.call(receiver); } return descriptor.value; }

var _start = new WeakMap();

var _setupEventListeners = new WeakMap();

var _onInputKeyup = new WeakMap();

var _onInputBlur = new WeakMap();

var _onDropdownToggleIcon = new WeakMap();

var _onHeaderReplaceToggleIcon = new WeakMap();

var _onHeaderReplaceCloseIcon = new WeakMap();

var _onOverlayToggleIcon = new WeakMap();

var _onOverlayCloseIcon = new WeakMap();

var _onDocumentClick = new WeakMap();

var _focus = new WeakMap();

var _hasTopHeader = new WeakMap();

var Search = function Search() {
  var _this = this;

  _classCallCheck(this, Search);

  _start.set(this, {
    writable: true,
    value: function value() {
      var _DOM$search$input;

      if ((_DOM$search$input = _constants.DOM.search.input) !== null && _DOM$search$input !== void 0 && _DOM$search$input.value) {
        var _DOM$search$form;

        (_DOM$search$form = _constants.DOM.search.form) === null || _DOM$search$form === void 0 ? void 0 : _DOM$search$form.classList.add("search-filled");
      }
    }
  });

  _setupEventListeners.set(this, {
    writable: true,
    value: function value() {
      var _DOM$search$input2, _DOM$search$input3;

      (_DOM$search$input2 = _constants.DOM.search.input) === null || _DOM$search$input2 === void 0 ? void 0 : _DOM$search$input2.addEventListener("keyup", _classPrivateFieldGet(_this, _onInputKeyup));
      (_DOM$search$input3 = _constants.DOM.search.input) === null || _DOM$search$input3 === void 0 ? void 0 : _DOM$search$input3.addEventListener("blur", _classPrivateFieldGet(_this, _onInputBlur)); // Drop-Down style

      if (_constants.options.menuSearchStyle == "drop_down") {
        var _DOM$search$dropdownT;

        (_DOM$search$dropdownT = _constants.DOM.search.dropdownToggleIcon) === null || _DOM$search$dropdownT === void 0 ? void 0 : _DOM$search$dropdownT.addEventListener("click", _classPrivateFieldGet(_this, _onDropdownToggleIcon));
      } // Header Replace style


      if (_constants.options.menuSearchStyle == "header_replace") {
        _constants.DOM.search.headerReplaceToggleIcon.addEventListener("click", _classPrivateFieldGet(_this, _onHeaderReplaceToggleIcon));

        _constants.DOM.search.headerReplaceCloseIcon.addEventListener("click", _classPrivateFieldGet(_this, _onHeaderReplaceCloseIcon));
      } // Overlay style


      if (_constants.options.menuSearchStyle == "overlay") {
        if (!!_constants.DOM.search.overlayToggleIcon) {
          _constants.DOM.search.overlayToggleIcon.addEventListener("click", _classPrivateFieldGet(_this, _onOverlayToggleIcon));
        }

        _constants.DOM.search.overlayCloseIcon.addEventListener("click", _classPrivateFieldGet(_this, _onOverlayCloseIcon));
      }

      document.addEventListener("click", _classPrivateFieldGet(_this, _onDocumentClick));
    }
  });

  _onInputKeyup.set(this, {
    writable: true,
    value: function value(event) {
      if (_constants.DOM.search.input.value) {
        _constants.DOM.search.form.classList.add("search-filled");
      } else {
        _constants.DOM.search.form.classList.remove("search-filled");
      }
    }
  });

  _onInputBlur.set(this, {
    writable: true,
    value: function value(event) {
      _classPrivateFieldGet(_this, _onInputKeyup).call(_this);
    }
  });

  _onDropdownToggleIcon.set(this, {
    writable: true,
    value: function value(event) {
      event.preventDefault();
      event.stopPropagation();
      var _DOM$search = _constants.DOM.search,
          toggleIcon = _DOM$search.dropdownToggleIcon,
          form = _DOM$search.dropdownForm;
      form.classList.toggle("show");
      toggleIcon.parentNode.classList.toggle("active");

      _classPrivateFieldGet(_this, _focus).call(_this, form, "input.field");
    }
  });

  _onHeaderReplaceToggleIcon.set(this, {
    writable: true,
    value: function value(event) {
      event.preventDefault();
      event.stopPropagation();
      var form = _constants.DOM.search.headerReplaceForm;
      form.classList.toggle("show");

      if (_classPrivateFieldGet(_this, _hasTopHeader).call(_this)) {
        _constants.DOM.headerTopLeftSide.classList.toggle("hide");

        _constants.DOM.headerTopRighttSide.classList.toggle("hide");
      } else {
        var _document$querySelect;

        _constants.DOM.nav.classList.toggle("hide");

        form.style.maxWidth = ((_document$querySelect = document.querySelector("#site-navigation > ul.dropdown-menu")) === null || _document$querySelect === void 0 ? void 0 : _document$querySelect.offsetWidth) + 60;
      }

      _classPrivateFieldGet(_this, _focus).call(_this, form, 'input[type="search"]');
    }
  });

  _onHeaderReplaceCloseIcon.set(this, {
    writable: true,
    value: function value(event) {
      event.preventDefault();
      var form = _constants.DOM.search.headerReplaceForm;
      form.classList.remove("show");

      if (_classPrivateFieldGet(_this, _hasTopHeader).call(_this)) {
        _constants.DOM.headerTopLeftSide.classList.remove("hide");

        _constants.DOM.headerTopRighttSide.classList.remove("hide");
      } else {
        _constants.DOM.nav.classList.remove("hide");
      }
    }
  });

  _onOverlayToggleIcon.set(this, {
    writable: true,
    value: function value(event) {
      event.preventDefault();
      var form = _constants.DOM.search.overlayForm;
      form.classList.add("active");
      (0, _utils.fadeIn)(form);
      form.getElementsByTagName("input")[0].focus();
      setTimeout(function () {
        _constants.DOM.html.style.overflow = "hidden";
      }, 400);
    }
  });

  _onOverlayCloseIcon.set(this, {
    writable: true,
    value: function value(event) {
      event.preventDefault();
      var form = _constants.DOM.search.overlayForm;
      form.classList.remove("active");
      (0, _utils.fadeOut)(form);
      setTimeout(function () {
        _constants.DOM.html.style.overflow = "visible";
      }, 400);
    }
  });

  _onDocumentClick.set(this, {
    writable: true,
    value: function value(event) {
      // Dropdonw Search Style Collaps
      if (!event.target.closest("#searchform-dropdown.show")) {
        var _DOM$search$dropdownF, _DOM$search$dropdownT2;

        (_DOM$search$dropdownF = _constants.DOM.search.dropdownForm) === null || _DOM$search$dropdownF === void 0 ? void 0 : _DOM$search$dropdownF.classList.remove("show");
        (_DOM$search$dropdownT2 = _constants.DOM.search.dropdownToggleIcon) === null || _DOM$search$dropdownT2 === void 0 ? void 0 : _DOM$search$dropdownT2.parentNode.classList.remove("active");
      } // Header Replace Search Style Collaps


      if (!event.target.closest("#searchform-header-replace.show")) {
        var _DOM$search$headerRep;

        (_DOM$search$headerRep = _constants.DOM.search.headerReplaceForm) === null || _DOM$search$headerRep === void 0 ? void 0 : _DOM$search$headerRep.classList.remove("show");

        if (_classPrivateFieldGet(_this, _hasTopHeader).call(_this)) {
          var _DOM$headerTopLeftSid, _DOM$headerTopRighttS;

          (_DOM$headerTopLeftSid = _constants.DOM.headerTopLeftSide) === null || _DOM$headerTopLeftSid === void 0 ? void 0 : _DOM$headerTopLeftSid.classList.remove("hide");
          (_DOM$headerTopRighttS = _constants.DOM.headerTopRighttSide) === null || _DOM$headerTopRighttS === void 0 ? void 0 : _DOM$headerTopRighttS.classList.remove("hide");
        } else {
          var _DOM$nav;

          (_DOM$nav = _constants.DOM.nav) === null || _DOM$nav === void 0 ? void 0 : _DOM$nav.classList.remove("hide");
        }
      }
    }
  });

  _focus.set(this, {
    writable: true,
    value: function value(form, inputClass) {
      var formTransitionDuration = parseFloat(getComputedStyle(form).transitionDuration.replace("s", "")) * 1000;

      if (formTransitionDuration) {
        setTimeout(function () {
          form.querySelector(inputClass).focus();
        }, formTransitionDuration);
      }
    }
  });

  _hasTopHeader.set(this, {
    writable: true,
    value: function value() {
      return _constants.DOM.header.classList.contains("top-header");
    }
  });

  _classPrivateFieldGet(this, _start).call(this);

  _classPrivateFieldGet(this, _setupEventListeners).call(this);
};

exports["default"] = Search;

},{"../constants":8,"../lib/utils":11}],7:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var _constants = require("../constants");

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _classPrivateFieldSet(receiver, privateMap, value) { var descriptor = _classExtractFieldDescriptor(receiver, privateMap, "set"); _classApplyDescriptorSet(receiver, descriptor, value); return value; }

function _classApplyDescriptorSet(receiver, descriptor, value) { if (descriptor.set) { descriptor.set.call(receiver, value); } else { if (!descriptor.writable) { throw new TypeError("attempted to set read only private field"); } descriptor.value = value; } }

function _classPrivateFieldGet(receiver, privateMap) { var descriptor = _classExtractFieldDescriptor(receiver, privateMap, "get"); return _classApplyDescriptorGet(receiver, descriptor); }

function _classExtractFieldDescriptor(receiver, privateMap, action) { if (!privateMap.has(receiver)) { throw new TypeError("attempted to " + action + " private field on non-instance"); } return privateMap.get(receiver); }

function _classApplyDescriptorGet(receiver, descriptor) { if (descriptor.get) { return descriptor.get.call(receiver); } return descriptor.value; }

var _select = new WeakMap();

var _render = new WeakMap();

var _style = new WeakMap();

var _setupEventListenersItem = new WeakMap();

var _onMouseenter = new WeakMap();

var _onMouseleave = new WeakMap();

var _setupEventListeners = new WeakMap();

var _onDocumentReady = new WeakMap();

var Select = function Select() {
  var _this = this;

  _classCallCheck(this, Select);

  _select.set(this, {
    writable: true,
    value: void 0
  });

  _render.set(this, {
    writable: true,
    value: function value() {
      _constants.DOM.selects.forEach(function (select) {
        _classPrivateFieldSet(_this, _select, select);

        _classPrivateFieldGet(_this, _select).insertAdjacentHTML("afterend", "<span class=\"theme-select ".concat(_classPrivateFieldGet(_this, _select).classList, "\">\n                    <span class=\"theme-selectInner\">\n                        ").concat(_classPrivateFieldGet(_this, _select).options[_classPrivateFieldGet(_this, _select).selectedIndex].text, "\n                    </span>\n                </span>"));

        _classPrivateFieldGet(_this, _select).classList.add("hasCustomSelect");

        _classPrivateFieldGet(_this, _style).call(_this);

        _classPrivateFieldGet(_this, _setupEventListenersItem).call(_this);
      });
    }
  });

  _style.set(this, {
    writable: true,
    value: function value() {
      _classPrivateFieldGet(_this, _select).style.opacity = 0;
      _classPrivateFieldGet(_this, _select).style.position = "absolute";
      _classPrivateFieldGet(_this, _select).style.height = "34px";
      _classPrivateFieldGet(_this, _select).style.fontSize = "13px";
      _classPrivateFieldGet(_this, _select).style.appearance = "menulist-button";
      _classPrivateFieldGet(_this, _select).nextSibling.style.display = "inline-block";
      _classPrivateFieldGet(_this, _select).nextSibling.firstElementChild.style.display = "inline-block";
    }
  });

  _setupEventListenersItem.set(this, {
    writable: true,
    value: function value() {
      _classPrivateFieldGet(_this, _select).addEventListener("mouseenter", _classPrivateFieldGet(_this, _onMouseenter));

      _classPrivateFieldGet(_this, _select).addEventListener("mouseleave", _classPrivateFieldGet(_this, _onMouseleave));
    }
  });

  _onMouseenter.set(this, {
    writable: true,
    value: function value() {
      _classPrivateFieldGet(_this, _select).classList.add("theme-selectHover");
    }
  });

  _onMouseleave.set(this, {
    writable: true,
    value: function value() {
      _classPrivateFieldGet(_this, _select).classList.remove("theme-selectHover");
    }
  });

  _setupEventListeners.set(this, {
    writable: true,
    value: function value() {
      document.addEventListener("DOMContentLoaded", _classPrivateFieldGet(_this, _onDocumentReady));
    }
  });

  _onDocumentReady.set(this, {
    writable: true,
    value: function value(event) {
      _constants.DOM.selects.forEach(function (select) {
        select.style.width = select.nextSibling.offsetWidth + "px";
      });
    }
  });

  _classPrivateFieldGet(this, _render).call(this);

  _classPrivateFieldGet(this, _setupEventListeners).call(this);
};

exports["default"] = Select;

},{"../constants":8}],8:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.DOMString = exports.DOM = exports.options = void 0;
var options = oceanwpLocalize;
exports.options = options;
var DOM = {
  WPAdminbar: document.querySelector("#wpadminbar"),
  html: document.querySelector("html"),
  body: document.body,
  main: document.querySelector("#main"),
  header: document.querySelector("#site-header"),
  headerTopLeftSide: document.querySelector("#site-header.top-header .header-top .left"),
  headerTopRightSide: document.querySelector("#site-header.top-header .header-top .right"),
  nav: document.querySelector("#site-header.header-replace #site-navigation"),
  fullScreenHeader: document.querySelector("#site-header.full_screen-header"),
  fullScreenMenu: document.querySelector("#site-header.full_screen-header #full-screen-menu"),
  fullScreenMenuBar: document.querySelector("#site-header.full_screen-header .menu-bar"),
  fullScreenLogo: document.querySelector("#site-logo.has-full-screen-logo"),
  selects: document.querySelectorAll(options.customSelects),
  mobileMenu: {
    nav: document.querySelector("#mobile-dropdown > nav"),
    navWrapper: document.querySelector("#mobile-dropdown"),
    icon: document.querySelector(".mobile-menu"),
    hamburger: document.querySelector(".mobile-menu > .hamburger"),
    menuItemsHasChildren: document.querySelectorAll("#mobile-dropdown .menu-item-has-children"),
    fullScreen: document.querySelector("#mobile-fullscreen")
  },
  search: {
    form: document.querySelector("form.header-searchform"),
    input: document.querySelector("form.header-searchform input"),
    dropdownToggleIcon: document.querySelector("a.search-dropdown-toggle"),
    dropdownForm: document.querySelector("#searchform-dropdown"),
    headerReplaceToggleIcon: document.querySelector("a.search-header-replace-toggle"),
    headerReplaceCloseIcon: document.querySelector("#searchform-header-replace-close"),
    headerReplaceForm: document.querySelector("#searchform-header-replace"),
    overlayToggleIcon: document.querySelector("a.search-overlay-toggle"),
    overlayCloseIcon: document.querySelector("a.search-overlay-close"),
    overlayForm: document.querySelector("#searchform-overlay")
  },
  scrollTop: document.querySelector("#scroll-top"),
  goTop: document.querySelector('a[href="#go-top"]'),
  goTopSlash: document.querySelector('body.home a[href="/#go-top"]'),
  blogMasonryGrids: document.querySelectorAll(".blog-masonry-grid"),
  parallaxFooter: document.querySelector(".parallax-footer")
};
exports.DOM = DOM;
var DOMString = {};
exports.DOMString = DOMString;

},{}],9:[function(require,module,exports){
"use strict";

require("./lib/element");

var _select = _interopRequireDefault(require("./components/select"));

var _menu = _interopRequireDefault(require("./components/menu"));

var _mobileMenu = _interopRequireDefault(require("./components/mobile-menu"));

var _search = _interopRequireDefault(require("./components/search"));

var _footer = _interopRequireDefault(require("./components/footer"));

var _scrollTop = _interopRequireDefault(require("./components/scroll-top"));

var _blogMasonry = _interopRequireDefault(require("./components/blog-masonry"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

var OceanWP = function OceanWP() {
  _classCallCheck(this, OceanWP);

  _defineProperty(this, "start", function () {});

  this.select = new _select["default"]();
  this.menu = new _menu["default"]();
  this.mobileMenu = new _mobileMenu["default"]();
  this.search = new _search["default"]();
  this.footer = new _footer["default"]();
  this.scrollTop = new _scrollTop["default"]();
  this.blogMasonry = new _blogMasonry["default"]();
};

"use script";
window.oceanwp = new OceanWP();
oceanwp.start();

},{"./components/blog-masonry":1,"./components/footer":2,"./components/menu":3,"./components/mobile-menu":4,"./components/scroll-top":5,"./components/search":6,"./components/select":7,"./lib/element":10}],10:[function(require,module,exports){
"use strict";

Element.prototype.oceanParents = function (selector) {
  var elements = [];
  var elem = this;
  var ishaveselector = selector !== undefined;

  while ((elem = elem.parentElement) !== null) {
    if (elem.nodeType !== Node.ELEMENT_NODE) {
      continue;
    }

    if (!ishaveselector || elem.matches(selector)) {
      elements.push(elem);
    }
  }

  return elements;
};

},{}],11:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.fadeOut = exports.fadeIn = exports.slideToggle = exports.slideDown = exports.slideUp = exports.wrap = void 0;

var wrap = function wrap(element) {
  var wrapper = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : document.createElement("div");

  if (element.nextSibling) {
    element.parentNode.insertBefore(wrapper, element.nextSibling);
  } else {
    element.parentNode.appendChild(wrapper);
  }

  return wrapper.appendChild(element);
};

exports.wrap = wrap;

var slideUp = function slideUp(element, duration) {
  element.style.transitionProperty = "height, margin, padding";
  element.style.transitionDuration = duration + "ms";
  element.style.boxSizing = "border-box";
  element.style.height = element.offsetHeight + "px";
  setTimeout(function () {
    element.style.height = 0;
  }, 10);
  element.style.paddingTop = 0;
  element.style.paddingBottom = 0;
  element.style.marginTop = 0;
  element.style.marginBottom = 0;
  element.style.overflow = "hidden";
  window.setTimeout(function () {
    element.style.display = "none";
    element.style.removeProperty("height");
    element.style.removeProperty("padding-top");
    element.style.removeProperty("padding-bottom");
    element.style.removeProperty("margin-top");
    element.style.removeProperty("margin-bottom");
    element.style.removeProperty("overflow");
    element.style.removeProperty("transition-duration");
    element.style.removeProperty("transition-property");
  }, duration);
};

exports.slideUp = slideUp;

var slideDown = function slideDown(element, duration) {
  element.style.removeProperty("display");
  var display = window.getComputedStyle(element).display;

  if (display === "none") {
    display = "block";
  }

  element.style.display = display;
  var height = element.offsetHeight;
  element.style.height = 0;
  element.style.paddingTop = 0;
  element.style.paddingBottom = 0;
  element.style.marginTop = 0;
  element.style.marginBottom = 0;
  element.style.overflow = "hidden";
  element.style.boxSizing = "border-box";
  element.style.transitionProperty = "height, margin, padding";
  element.style.transitionDuration = duration + "ms";
  setTimeout(function () {
    element.style.height = height + "px";
  }, 10);
  element.style.removeProperty("padding-top");
  element.style.removeProperty("padding-bottom");
  element.style.removeProperty("margin-top");
  element.style.removeProperty("margin-bottom");
  window.setTimeout(function () {
    element.style.removeProperty("height");
    element.style.removeProperty("overflow");
    element.style.removeProperty("transition-duration");
    element.style.removeProperty("transition-property");
  }, duration);
};

exports.slideDown = slideDown;

var slideToggle = function slideToggle(element, duration) {
  return window.getComputedStyle(element).display === "none" ? slideDown(element, duration) : slideUp(element, duration);
};

exports.slideToggle = slideToggle;

var fadeIn = function fadeIn(element, display) {
  element.style.opacity = 0;
  element.style.display = display || "block";

  (function fade() {
    var val = parseFloat(element.style.opacity);

    if (!((val += 0.1) > 1)) {
      element.style.opacity = val;
      requestAnimationFrame(fade);
    }
  })();
};

exports.fadeIn = fadeIn;

var fadeOut = function fadeOut(element) {
  element.style.opacity = 1;

  (function fade() {
    if ((element.style.opacity -= 0.1) < 0) {
      element.style.display = "none";
    } else {
      requestAnimationFrame(fade);
    }
  })();
};

exports.fadeOut = fadeOut;

},{}]},{},[9])
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
